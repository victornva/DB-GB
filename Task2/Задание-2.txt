---------------------------------------------------------------------------------------------------------------------------------
Установите СУБД MySQL. Создайте в домашней директории файл .my.cnf, задав в нем логин и пароль, который указывался при установке.
Создайте базу данных example, разместите в ней таблицу users, состоящую из двух столбцов, числового id и строкового name.
Создайте дамп базы данных example из предыдущего задания, разверните содержимое дампа в новую базу данных sample.
Ознакомьтесь более подробно с документацией утилиты mysqldump. 
Создайте дамп единственной таблицы help_keyword базы данных mysql. 
Причем добейтесь того, чтобы дамп содержал только первые 100 строк таблицы.
---------------------------------------------------------------------------------------------------------------------------------

Ubuntu 20.04

--устанавливаем пакет:
$ sudo apt-get install postgresql postgresql-contrib

--переключаемся на созданного в процессе установки пользователя:
$ sudo su - postgres
$ whoami
postgres

--заходим в консоль Postgres SQL:
$ psql
psql (12.2 (Ubuntu 12.2-4))
Type "help" for help.

--смотрим данные соединения:
postgres=# \conninfo
You are connected to database "postgres" as user "postgres" via socket in "/var/run/postgresql" at port "5432".

--для выхода из консоли:
postgres=# \q

--создаём базу:
$ createdb example

--заходим в консоль и смотрим список баз и пользователей:
postgres=# \list
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 example   | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 postgres  | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 template0 | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres

--или так:
postgres=# SELECT datname FROM pg_database;
  datname
-----------
 postgres
 example
 template1
 template0

postgres=# select * from pg_user;
 usename  | usesysid | usecreatedb | usesuper | userepl | usebypassrls |  passwd  | valuntil | useconfig
----------+----------+-------------+----------+---------+--------------+----------+----------+-----------
 postgres |       10 | t           | t        | t       | t            | ******** |          |
 example  |    16385 | t           | t        | f       | f            | ******** |          |

--подключимся к нашей базе:
postgres=# \c example
You are now connected to database "example" as user "postgres".

--создадим таблицу:
example=# CREATE TABLE users (
example(# id serial PRIMARY KEY,
example(# name varchar (50) NOT NULL
example(# );
CREATE TABLE

--посмотрим список таблиц в базе example:
example=# \dt
         List of relations
 Schema | Name  | Type  |  Owner
--------+-------+-------+----------
 public | users | table | postgres
(1 row)

--проверяем:
example=# select * from users;
 id | name
----+------
(0 rows)

--добавляем строки:
example=# insert into users (name) values (victor);
INSERT 0 1
example=# insert into users (name) values ('vasily');
INSERT 0 1
example=# insert into users (name) values ('olga');
INSERT 0 1

example=# select * from users;
 id |  name
----+--------
  1 | victor
  2 | vasily
  3 | olga
(3 rows)

example=# \q

---------------------------------
--Делаем дамп:
--смотрим права на папку куда будем сгружать базу
$ pwd
/var/lib/postgresql
$ ls -l
drwxr-xr-x 3 postgres postgres 4096 авг 24 10:56 12

-------
$ pg_dump example > example.dump

$ ls -l
drwxr-xr-x 3 postgres postgres 4096 авг 24 10:56 12
-rw-rw-r-- 1 postgres postgres 1851 авг 24 12:36 example.dump

--------------------------
--смотрим что получилось....
$ cat example.dump
--
-- PostgreSQL database dump
--
-- Dumped from database version 12.2 (Ubuntu 12.2-4)
-- Dumped by pg_dump version 12.2 (Ubuntu 12.2-4)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET default_tablespace = '';
SET default_table_access_method = heap;
--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--
CREATE TABLE public.users (
    id integer NOT NULL,
    name character varying(50) NOT NULL
);

ALTER TABLE public.users OWNER TO postgres;
--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--
CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE public.users_id_seq OWNER TO postgres;
--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--
ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;
--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--
ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);
--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--
COPY public.users (id, name) FROM stdin;
1       victor
2       vasily
3       olga
\.
--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--
SELECT pg_catalog.setval('public.users_id_seq', 3, true);
--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--
ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);
--
-- PostgreSQL database dump complete
--

--------------------------------
--Восстановим данные в новую базу:

$ psql
psql (12.2 (Ubuntu 12.2-4))
Type "help" for help.

--создадим базу sample
postgres=# CREATE DATABASE sample WITH ENCODING='UTF-8';
CREATE DATABASE
postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 example   | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 postgres  | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 sample    | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 template0 | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
(5 rows)

postgres=# \q

--загрузим туда дамп:
$ psql sample < example.dump
SET
SET
SET
SET
SET
 set_config
------------

(1 row)

SET
SET
SET
SET
SET
SET
CREATE TABLE
ALTER TABLE
CREATE SEQUENCE
ALTER TABLE
ALTER SEQUENCE
ALTER TABLE
COPY 3
 setval
--------
      3
(1 row)

ALTER TABLE

--посмотрим что получилось:
$ psql
psql (12.2 (Ubuntu 12.2-4))
Type "help" for help.

postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 example   | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 postgres  | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 sample    | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 |
 template0 | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | ru_RU.UTF-8 | ru_RU.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
(5 rows)

postgres=# \c sample
You are now connected to database "sample" as user "postgres".
sample=# select * from users;
 id |  name
----+--------
  1 | victor
  2 | vasily
  3 | olga
(3 rows)

---всё ОК!

---------------------------------
-- делаем дамп только одной таблицы:

$ pg_dump -t users example > users.dump

postgres=# CREATE DATABASE usersDB WITH ENCODING='UTF-8';

$ psql usersDB < users.dump

postgres=# \c usersdb
You are now connected to database "usersdb" as user "postgres".
usersdb=# select * from users;
 id |  name
----+--------
  1 | victor
  2 | vasily
  3 | olga
(3 rows)

---------------------------------
-- По поводу выгрузки первых 100 записей: в MySQL это делается примерно так: 

mysqldump -uroot --where="true limit 100" database > database.sql

-- На Postgres я пока аналога не нашёл, но там есть возможность контролировать размер дампа
-- с помощью опции split: в примере дамп бьётся на куски не более 1 Мб

pg_dump имя_базы | split -b 1m - имя_файла